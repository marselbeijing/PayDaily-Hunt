// –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
// –ó–∞–ø—É—Å–∫: node test-referral-system.js

const axios = require('axios');

const API_BASE_URL = 'http://localhost:5000/api';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUsers = [
    {
        telegramId: '123456789',
        username: 'test_user_1',
        firstName: 'Test',
        lastName: 'User 1'
    },
    {
        telegramId: '987654321',
        username: 'test_user_2',
        firstName: 'Test',
        lastName: 'User 2'
    }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createTestUser(userData) {
    try {
        const initData = `user=${JSON.stringify(userData)}&auth_date=${Date.now()}&hash=test_hash`;
        
        const response = await axios.post(`${API_BASE_URL}/auth/telegram`, {
            initData,
            referralCode: null
        });
        
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.username} —Å–æ–∑–¥–∞–Ω:`, response.data.user.referralCode);
        return response.data.token;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.username}:`, error.response?.data || error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
async function createReferral(userData, referralCode, token) {
    try {
        const initData = `user=${JSON.stringify(userData)}&auth_date=${Date.now()}&hash=test_hash`;
        
        const response = await axios.post(`${API_BASE_URL}/auth/telegram`, {
            initData,
            referralCode
        });
        
        console.log(`‚úÖ –†–µ—Ñ–µ—Ä–∞–ª ${userData.username} —Å–æ–∑–¥–∞–Ω —Å –∫–æ–¥–æ–º ${referralCode}`);
        return response.data.token;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ${userData.username}:`, error.response?.data || error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getProfile(token) {
    try {
        const response = await axios.get(`${API_BASE_URL}/users/profile`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        
        return response.data.user;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error.response?.data || error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
async function getReferrals(token) {
    try {
        const response = await axios.get(`${API_BASE_URL}/users/referrals`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        
        return response.data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error.response?.data || error.message);
        return null;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testReferralSystem() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...\n');
    
    // 1. –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ—Ñ–µ—Ä–µ—Ä–∞)
    console.log('üìù –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞');
    const referrerToken = await createTestUser(testUsers[0]);
    if (!referrerToken) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç');
        return;
    }
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    console.log('\nüìä –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞');
    const referrerProfile = await getProfile(referrerToken);
    if (!referrerProfile) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞');
        return;
    }
    
    console.log('üìã –ü—Ä–æ—Ñ–∏–ª—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞:');
    console.log(`   - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referrerProfile.referralCode}`);
    console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referrerProfile.referrals || 0}`);
    console.log(`   - –ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referrerProfile.referralEarnings || 0}`);
    
    // 3. –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—ã —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    console.log('\nüë• –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞');
    const referralsData = await getReferrals(referrerToken);
    if (!referralsData) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã');
        return;
    }
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:');
    console.log(`   - –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralsData.stats.totalReferrals}`);
    console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referralsData.stats.activeReferrals}`);
    console.log(`   - –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${referralsData.stats.totalEarnings}`);
    
    // 4. –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    console.log('\nüë§ –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞');
    const referralToken = await createReferral(testUsers[1], referrerProfile.referralCode, referrerToken);
    if (!referralToken) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞');
        return;
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    console.log('\nüîÑ –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    const updatedReferralsData = await getReferrals(referrerToken);
    if (updatedReferralsData) {
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:');
        console.log(`   - –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${updatedReferralsData.stats.totalReferrals}`);
        console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${updatedReferralsData.stats.activeReferrals}`);
        console.log(`   - –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: ${updatedReferralsData.stats.totalEarnings}`);
        
        if (updatedReferralsData.referrals.length > 0) {
            console.log('üë• –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:');
            updatedReferralsData.referrals.forEach((referral, index) => {
                console.log(`   ${index + 1}. ${referral.displayName} - –ó–∞–¥–∞–Ω–∏–π: ${referral.tasksCompleted}, –ë–∞–ª–ª—ã: ${referral.points}`);
            });
        }
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    console.log('\nüë§ –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞');
    const referralProfile = await getProfile(referralToken);
    if (referralProfile) {
        console.log('üìã –ü—Ä–æ—Ñ–∏–ª—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞:');
        console.log(`   - –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${referralProfile.referralCode}`);
        console.log(`   - –ü—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: ${referralProfile.referredBy ? '–î–∞' : '–ù–µ—Ç'}`);
        console.log(`   - –ë–∞–ª–ª—ã: ${referralProfile.points}`);
    }
    
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
    testReferralSystem().catch(console.error);
}

module.exports = {
    testReferralSystem,
    createTestUser,
    createReferral,
    getProfile,
    getReferrals
};