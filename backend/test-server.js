const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
require('dotenv').config();

const app = express();

// Middleware
app.use(helmet());
app.use(cors({
    origin: [
        process.env.FRONTEND_URL || 'http://localhost:3000',
        'http://localhost:3001',
        'https://d178-82-215-122-254.ngrok-free.app',
        'http://192.168.1.102:3001'
    ],
    credentials: true
}));

// Rate limiting
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
    message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
});
app.use(limiter);

app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUsers = {};
let testTasks = [
  {
    id: 1,
    title: '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ –Ω–∞ YouTube',
    description: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –ª–∞–π–∫–Ω–∏—Ç–µ',
    reward: 50,
    category: 'entertainment',
    difficulty: 'easy',
    timeEstimate: 5,
    isActive: true
  },
  {
    id: 2,
    title: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Telegram –∫–∞–Ω–∞–ª',
    description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –≤ Telegram',
    reward: 100,
    category: 'social',
    difficulty: 'easy',
    timeEstimate: 2,
    isActive: true
  }
];

// –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/auth/test', (req, res) => {
    res.json({
        success: true,
        message: 'Backend —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        timestamp: new Date().toISOString(),
        version: '1.0.0-test'
    });
});

app.post('/api/auth/telegram', (req, res) => {
    try {
        const { initData, referralCode } = req.body;
        
        // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –¥–∞–Ω–Ω—ã—Ö
        const userId = Date.now(); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
        const user = {
            id: userId,
            telegramId: userId,
            username: 'test_user',
            firstName: 'Test',
            lastName: 'User',
            balance: 1000,
            vipLevel: 'bronze',
            dailyStreak: 1,
            totalTasks: 0,
            referralCode: `ref_${userId}`,
            isActive: true,
            createdAt: new Date()
        };
        
        testUsers[userId] = user;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        const token = `test_token_${userId}`;
        
        res.json({
            success: true,
            user,
            token,
            message: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (—Ç–µ—Å—Ç)'
        });
    } catch (error) {
        res.status(400).json({
            success: false,
            message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + error.message
        });
    }
});

app.post('/api/auth/checkin', (req, res) => {
    const reward = Math.floor(Math.random() * 91) + 10; // 10-100 points
    const streak = Math.floor(Math.random() * 7) + 1;
    
    res.json({
        success: true,
        reward,
        streak,
        nextReward: reward + 10,
        message: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω!'
    });
});

app.get('/api/tasks', (req, res) => {
    res.json({
        success: true,
        tasks: testTasks,
        total: testTasks.length
    });
});

app.post('/api/tasks/:id/start', (req, res) => {
    const taskId = parseInt(req.params.id);
    const task = testTasks.find(t => t.id === taskId);
    
    if (!task) {
        return res.status(404).json({
            success: false,
            message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }
    
    res.json({
        success: true,
        task,
        message: '–ó–∞–¥–∞—á–∞ –Ω–∞—á–∞—Ç–∞'
    });
});

app.post('/api/tasks/:id/complete', (req, res) => {
    const taskId = parseInt(req.params.id);
    const task = testTasks.find(t => t.id === taskId);
    
    if (!task) {
        return res.status(404).json({
            success: false,
            message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
    }
    
    res.json({
        success: true,
        reward: task.reward,
        message: '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!',
        newBalance: 1000 + task.reward
    });
});

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
    res.json({ 
        message: 'PayDaily Hunt TEST API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        version: '1.0.0-test',
        timestamp: new Date().toISOString(),
        note: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ MongoDB'
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use('*', (req, res) => {
    res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({ 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: process.env.NODE_ENV === 'development' ? err.message : '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
    });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`üöÄ –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì± API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
    console.log('‚ö†Ô∏è  –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ MongoDB');
}); 