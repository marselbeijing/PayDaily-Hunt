import axios from 'axios';

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const api = axios.create({
  baseURL: process.env.REACT_APP_API_URL || '/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∫ –∑–∞–ø—Ä–æ—Å–∞–º
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// –ò–Ω—Ç–µ—Ä—Å–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
api.interceptors.response.use(
  (response) => {
    return response.data;
  },
  (error) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (error.response?.status === 401 || error.response?.status === 403) {
      localStorage.removeItem('token');
      window.location.href = '/';
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
    const errorMessage = error.response?.data?.message || 
                        error.message || 
                        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    
    return Promise.reject({
      message: errorMessage,
      status: error.response?.status,
      data: error.response?.data
    });
  }
);

// AUTH API
export const authTelegram = async (data) => {
  return api.post('/auth/telegram', data);
};

export const performCheckin = async () => {
  return api.post('/auth/checkin');
};

export const getProfile = async () => {
  return api.get('/auth/profile');
};

export const updateProfile = async (data) => {
  return api.put('/auth/profile', data);
};

export const refreshToken = async () => {
  return api.post('/auth/refresh');
};

export const getCheckinStatus = async () => {
  return api.get('/auth/checkin-status');
};

// TASKS API
export const getTasks = async (params = {}) => {
  return api.get('/tasks', { params });
};

export const getTask = async (id) => {
  return api.get(`/tasks/${id}`);
};

export const startTask = async (id, data = {}) => {
  return api.post(`/tasks/${id}/start`, data);
};

export const completeTask = async (completionId, data = {}) => {
  return api.post(`/tasks/complete/${completionId}`, data);
};

export const getTaskHistory = async (params = {}) => {
  return api.get('/tasks/history', { params });
};

export const getTaskCategories = async () => {
  return api.get('/tasks/categories');
};

export const rateTask = async (completionId, data) => {
  return api.post(`/tasks/rate/${completionId}`, data);
};

// USERS API
export const getLeaderboard = async (params = {}) => {
  return api.get('/users/leaderboard', { params });
};

export const getReferrals = async () => {
  return api.get('/users/referrals');
};

export const getUserStats = async (params = {}) => {
  return api.get('/users/stats', { params });
};

export const getAchievements = async () => {
  return api.get('/users/achievements');
};

export const getUserProfile = async (userId) => {
  return api.get(`/users/profile/${userId}`);
};

// PAYMENTS API
export const getPaymentRates = async () => {
  return api.get('/payments/rates');
};

export const calculateWithdrawal = async (data) => {
  return api.post('/payments/calculate', data);
};

export const createWithdrawal = async (data) => {
  return api.post('/payments/withdraw', data);
};

export const getWithdrawals = async (params = {}) => {
  return api.get('/payments/withdrawals', { params });
};

export const getWithdrawal = async (id) => {
  return api.get(`/payments/withdrawal/${id}`);
};

export const cancelWithdrawal = async (id) => {
  return api.post(`/payments/withdrawal/${id}/cancel`);
};

export const getPaymentStats = async () => {
  return api.get('/payments/stats');
};

// PARTNERS API
export const getPartnerStats = async () => {
  return api.get('/partners/stats');
};

// UTILITY FUNCTIONS

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
export const formatNumber = (num) => {
  if (num >= 1000000) {
    return (num / 1000000).toFixed(1) + 'M';
  }
  if (num >= 1000) {
    return (num / 1000).toFixed(1) + 'K';
  }
  return num.toString();
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
export const formatCurrency = (amount, currency = 'USDT') => {
  const formatted = parseFloat(amount).toFixed(2);
  return `${formatted} ${currency}`;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤
export const formatPoints = (points) => {
  return points.toLocaleString('ru-RU');
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
export const formatTime = (seconds) => {
  if (seconds < 60) {
    return `${seconds}—Å`;
  }
  if (seconds < 3600) {
    return `${Math.floor(seconds / 60)}–º ${seconds % 60}—Å`;
  }
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  return `${hours}—á ${minutes}–º`;
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
export const formatDate = (date) => {
  const now = new Date();
  const target = new Date(date);
  const diffMs = now - target;
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  
  if (diffDays === 0) {
    return '–°–µ–≥–æ–¥–Ω—è';
  }
  if (diffDays === 1) {
    return '–í—á–µ—Ä–∞';
  }
  if (diffDays < 7) {
    return `${diffDays} –¥–Ω–µ–π –Ω–∞–∑–∞–¥`;
  }
  
  return target.toLocaleDateString('ru-RU');
};

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ
export const formatRelativeTime = (date) => {
  const now = new Date();
  const target = new Date(date);
  const diffMs = now - target;
  const diffMinutes = Math.floor(diffMs / (1000 * 60));
  const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  
  if (diffMinutes < 1) {
    return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
  }
  if (diffMinutes < 60) {
    return `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
  }
  if (diffHours < 24) {
    return `${diffHours} —á –Ω–∞–∑–∞–¥`;
  }
  if (diffDays < 30) {
    return `${diffDays} –¥–Ω –Ω–∞–∑–∞–¥`;
  }
  
  return formatDate(date);
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
export const getInitials = (firstName, lastName) => {
  const first = firstName?.charAt(0)?.toUpperCase() || '';
  const last = lastName?.charAt(0)?.toUpperCase() || '';
  return first + last || '?';
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è VIP —É—Ä–æ–≤–Ω—è
export const getVipColor = (level) => {
  const colors = {
    none: '#999999',
    bronze: '#CD7F32',
    silver: '#C0C0C0',
    gold: '#FFD700',
    platinum: '#E5E4E2',
    diamond: '#B9F2FF'
  };
  return colors[level] || colors.none;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ emoji –¥–ª—è VIP —É—Ä–æ–≤–Ω—è
export const getVipEmoji = (level) => {
  const emojis = {
    none: '‚ö™',
    bronze: 'ü•â',
    silver: 'ü•à',
    gold: 'ü•á',
    platinum: 'üíé',
    diamond: 'üí†'
  };
  return emojis[level] || emojis.none;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
export const getTaskStatusText = (status) => {
  const statuses = {
    started: '–ù–∞—á–∞—Ç–æ',
    submitted: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
    pending_verification: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
    verified: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
    rejected: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ',
    cancelled: '–û—Ç–º–µ–Ω–µ–Ω–æ'
  };
  return statuses[status] || status;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è
export const getTaskStatusColor = (status) => {
  const colors = {
    started: '#ffa502',
    submitted: '#3742fa',
    pending_verification: '#2f3542',
    verified: '#2ed573',
    rejected: '#ff4757',
    cancelled: '#999999'
  };
  return colors[status] || '#999999';
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
export const getWithdrawalStatusText = (status) => {
  const statuses = {
    pending: '–û–∂–∏–¥–∞–µ—Ç',
    processing: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
    completed: '–ó–∞–≤–µ—Ä—à–µ–Ω',
    failed: '–û—à–∏–±–∫–∞',
    cancelled: '–û—Ç–º–µ–Ω–µ–Ω',
    on_hold: '–ù–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–∏'
  };
  return statuses[status] || status;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–≤–æ–¥–∞
export const getWithdrawalStatusColor = (status) => {
  const colors = {
    pending: '#ffa502',
    processing: '#3742fa',
    completed: '#2ed573',
    failed: '#ff4757',
    cancelled: '#999999',
    on_hold: '#ff6b35'
  };
  return colors[status] || '#999999';
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
export const validateWalletAddress = (address, type) => {
  const patterns = {
    USDT_TRC20: /^T[A-Za-z1-9]{33}$/,
    USDT_ERC20: /^0x[a-fA-F0-9]{40}$/,
    USDT_BEP20: /^0x[a-fA-F0-9]{40}$/,
    BTC: /^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$|^bc1[a-z0-9]{39,59}$/,
    ETH: /^0x[a-fA-F0-9]{40}$/,
    BNB: /^0x[a-fA-F0-9]{40}$/
  };
  
  const pattern = patterns[type];
  return pattern ? pattern.test(address) : false;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –∫–æ—à–µ–ª—å–∫–∞
export const getWalletIcon = (type) => {
  const icons = {
    USDT_TRC20: 'üí∞',
    USDT_ERC20: 'üí∞',
    USDT_BEP20: 'üí∞',
    BTC: '‚Çø',
    ETH: 'Œû',
    BNB: 'üü°'
  };
  return icons[type] || 'üí∞';
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ç–∏
export const getNetworkName = (network) => {
  const names = {
    TRON: 'TRON',
    ETHEREUM: 'Ethereum',
    BSC: 'Binance Smart Chain',
    BITCOIN: 'Bitcoin'
  };
  return names[network] || network;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–∞–ø–∫–∏–∫ —Ñ–∏–¥–±–µ–∫–∞ (–≤–∏–±—Ä–∞—Ü–∏—è)
export const hapticFeedback = (type = 'light') => {
  if (window.Telegram?.WebApp?.HapticFeedback) {
    const haptic = window.Telegram.WebApp.HapticFeedback;
    
    switch (type) {
      case 'light':
        haptic.impactOccurred('light');
        break;
      case 'medium':
        haptic.impactOccurred('medium');
        break;
      case 'heavy':
        haptic.impactOccurred('heavy');
        break;
      case 'success':
        haptic.notificationOccurred('success');
        break;
      case 'warning':
        haptic.notificationOccurred('warning');
        break;
      case 'error':
        haptic.notificationOccurred('error');
        break;
      default:
        haptic.impactOccurred('light');
    }
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ Telegram
export const showMainButton = (text, onClick) => {
  if (window.Telegram?.WebApp?.MainButton) {
    const mainButton = window.Telegram.WebApp.MainButton;
    mainButton.setText(text);
    mainButton.onClick(onClick);
    mainButton.show();
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ Telegram
export const hideMainButton = () => {
  if (window.Telegram?.WebApp?.MainButton) {
    window.Telegram.WebApp.MainButton.hide();
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏
export const openLink = (url, options = {}) => {
  if (window.Telegram?.WebApp?.openLink) {
    window.Telegram.WebApp.openLink(url, options);
  } else {
    window.open(url, '_blank');
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
export const copyToClipboard = async (text) => {
  try {
    if (navigator.clipboard && window.isSecureContext) {
      await navigator.clipboard.writeText(text);
      return true;
    } else {
      // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      const textArea = document.createElement('textarea');
      textArea.value = text;
      textArea.style.position = 'absolute';
      textArea.style.left = '-999999px';
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      const result = document.execCommand('copy');
      document.body.removeChild(textArea);
      return result;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return false;
  }
};

export default api; 