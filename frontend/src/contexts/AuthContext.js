import React, { createContext, useContext, useState, useCallback } from 'react';
import toast from 'react-hot-toast';
import { authTelegram, performCheckin, getProfile, refreshToken } from '../services/api';

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–Ω—É—Ç—Ä–∏ AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [token, setToken] = useState(localStorage.getItem('token'));

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
  const initializeTelegramAuth = useCallback(async (referralCode = null) => {
    try {
      setLoading(true);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
      const savedToken = localStorage.getItem('token');
      if (savedToken) {
        try {
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
          const profileData = await getProfile(savedToken);
          setUser(profileData.user);
          setToken(savedToken);
          setLoading(false);
          return;
        } catch (error) {
          // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
          localStorage.removeItem('token');
          setToken(null);
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ Telegram WebApp
      const webApp = window.Telegram?.WebApp;
      if (!webApp || !webApp.initData) {
        // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (process.env.NODE_ENV === 'development') {
          const mockUser = {
            id: 'dev_user_123',
            telegramId: '123456789',
            username: 'dev_user',
            firstName: 'Test',
            lastName: 'User',
            points: 1500,
            totalEarned: 5000,
            vipLevel: 'bronze',
            vipPoints: 1200,
            vipMultiplier: 1.1,
            nextVipLevel: 'silver',
            pointsToNextVip: 3800,
            checkinStreak: 3,
            maxCheckinStreak: 7,
            canCheckin: true,
            tasksCompleted: 15,
            tasksCompletedToday: 2,
            referralCode: 'TEST123',
            referrals: 2,
            referralEarnings: 200,
            isActive: true,
            createdAt: new Date().toISOString()
          };
          
          setUser(mockUser);
          setToken('dev_token');
          localStorage.setItem('token', 'dev_token');
          setLoading(false);
          return;
        }
        
        throw new Error('Telegram WebApp –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      }

      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
      const authData = await authTelegram({
        initData: webApp.initData,
        referralCode
      });

      if (authData.success) {
        setUser(authData.user);
        setToken(authData.token);
        localStorage.setItem('token', authData.token);
        toast.success('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PayDaily Hunt! üéâ');
      } else {
        throw new Error(authData.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      toast.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ' + error.message);
    } finally {
      setLoading(false);
    }
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const updateUser = useCallback(async () => {
    if (!token) return;
    
    try {
      const profileData = await getProfile(token);
      setUser(profileData.user);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –≤—ã—Ö–æ–¥–∏–º
      if (error.response?.status === 401 || error.response?.status === 403) {
        logout();
      }
    }
  }, [token]);

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞
  const performDailyCheckin = useCallback(async () => {
    if (!token || !user) return;

    try {
      const response = await performCheckin(token);
      
      if (response.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setUser(prevUser => ({
          ...prevUser,
          ...response.user
        }));
        
        toast.success(
          `–ß–µ–∫-–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω! +${response.reward.points} –±–∞–ª–ª–æ–≤ üéâ`
        );
        
        return response.reward;
      } else {
        throw new Error(response.message);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —á–µ–∫-–∏–Ω–∞:', error);
      toast.error('–û—à–∏–±–∫–∞ —á–µ–∫-–∏–Ω–∞: ' + error.message);
      throw error;
    }
  }, [token, user]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  const refreshAuthToken = useCallback(async () => {
    if (!token) return;

    try {
      const response = await refreshToken(token);
      if (response.success) {
        setToken(response.token);
        localStorage.setItem('token', response.token);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error);
      logout();
    }
  }, [token]);

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  const logout = useCallback(() => {
    setUser(null);
    setToken(null);
    localStorage.removeItem('token');
    toast.success('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π)
  const updateUserPoints = useCallback((newPoints, earnedPoints) => {
    setUser(prevUser => {
      if (!prevUser) return null;
      
      return {
        ...prevUser,
        points: newPoints,
        totalEarned: prevUser.totalEarned + earnedPoints,
        tasksCompleted: prevUser.tasksCompleted + 1,
        tasksCompletedToday: prevUser.tasksCompletedToday + 1
      };
    });
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ VIP —Å—Ç–∞—Ç—É—Å–∞
  const updateVipStatus = useCallback((vipData) => {
    setUser(prevUser => {
      if (!prevUser) return null;
      
      return {
        ...prevUser,
        ...vipData
      };
    });
  }, []);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
  const addReferral = useCallback((referralData) => {
    setUser(prevUser => {
      if (!prevUser) return null;
      
      return {
        ...prevUser,
        referrals: prevUser.referrals + 1,
        referralEarnings: prevUser.referralEarnings + (referralData.bonus || 0)
      };
    });
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞
  const updateBalanceAfterWithdrawal = useCallback((pointsDeducted) => {
    setUser(prevUser => {
      if (!prevUser) return null;
      
      return {
        ...prevUser,
        points: prevUser.points - pointsDeducted
      };
    });
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  const isTokenValid = useCallback(() => {
    if (!token) return false;
    
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ JWT
      const payload = JSON.parse(atob(token.split('.')[1]));
      const now = Date.now() / 1000;
      return payload.exp > now;
    } catch (error) {
      return false;
    }
  }, [token]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
  const getAuthHeaders = useCallback(() => {
    return token ? { Authorization: `Bearer ${token}` } : {};
  }, [token]);

  // –ó–Ω–∞—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const value = {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    user,
    loading,
    token,
    isAuthenticated: !!user && !!token,
    
    // –ú–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    initializeTelegramAuth,
    logout,
    refreshAuthToken,
    
    // –ú–µ—Ç–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateUser,
    performDailyCheckin,
    updateUserPoints,
    updateVipStatus,
    addReferral,
    updateBalanceAfterWithdrawal,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    isTokenValid,
    getAuthHeaders
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}; 