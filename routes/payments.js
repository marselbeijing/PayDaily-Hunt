const express = require('express');
const { body, query, validationResult } = require('express-validator');
const User = require('../models/User');
const WithdrawalRequest = require('../models/WithdrawalRequest');
const router = express.Router();

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];
  
  if (!token) {
    return res.status(401).json({ success: false, message: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
  }
  
  const jwt = require('jsonwebtoken');
  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ success: false, message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
    req.user = user;
    next();
  });
};

// @route GET /api/payments/rates
// @desc –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
// @access Private
router.get('/rates', authenticateToken, async (req, res) => {
  try {
    const rates = {
      pointsToUSDT: parseInt(process.env.POINTS_TO_USDT_RATE) || 1000,
      feePercent: parseFloat(process.env.WITHDRAWAL_FEE_PERCENT) || 5,
      minWithdrawal: parseInt(process.env.MIN_WITHDRAWAL_POINTS) || 1000,
      supportedWallets: [
        {
          type: 'USDT_TRC20',
          network: 'TRON',
          name: 'USDT (TRC-20)',
          fee: 1, // USDT
          minAmount: 1,
          icon: 'üí∞'
        },
        {
          type: 'USDT_ERC20',
          network: 'ETHEREUM',
          name: 'USDT (ERC-20)',
          fee: 15, // USDT
          minAmount: 20,
          icon: 'üí∞'
        },
        {
          type: 'USDT_BEP20',
          network: 'BSC',
          name: 'USDT (BEP-20)',
          fee: 0.5, // USDT
          minAmount: 1,
          icon: 'üí∞'
        }
      ]
    };
    
    res.json({
      success: true,
      rates
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// @route POST /api/payments/calculate
// @desc –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞
// @access Private
router.post('/calculate', [
  authenticateToken,
  body('points').isInt({ min: 1 }),
  body('walletType').isIn(['USDT_TRC20', 'USDT_ERC20', 'USDT_BEP20'])
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        errors: errors.array()
      });
    }
    
    const { points, walletType } = req.body;
    
    const user = await User.findById(req.user.userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
    if (user.points < points) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤',
        available: user.points,
        requested: points
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
    const minWithdrawal = parseInt(process.env.MIN_WITHDRAWAL_POINTS) || 1000;
    if (points < minWithdrawal) {
      return res.status(400).json({
        success: false,
        message: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: ${minWithdrawal} –±–∞–ª–ª–æ–≤`,
        minWithdrawal
      });
    }
    
    // –†–∞—Å—á–µ—Ç—ã
    const conversionRate = parseInt(process.env.POINTS_TO_USDT_RATE) || 1000;
    const feePercent = parseFloat(process.env.WITHDRAWAL_FEE_PERCENT) || 5;
    
    const baseAmount = points / conversionRate; // USDT
    const processingFee = (baseAmount * feePercent) / 100;
    
    // –°–µ—Ç–µ–≤—ã–µ –∫–æ–º–∏—Å—Å–∏–∏
    const networkFees = {
      'USDT_TRC20': 1,
      'USDT_ERC20': 15,
      'USDT_BEP20': 0.5
    };
    
    const networkFee = networkFees[walletType] || 1;
    const finalAmount = baseAmount - processingFee - networkFee;
    
    if (finalAmount <= 0) {
      return res.status(400).json({
        success: false,
        message: '–°—É–º–º–∞ –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞',
        calculation: {
          baseAmount,
          processingFee,
          networkFee,
          finalAmount
        }
      });
    }
    
    res.json({
      success: true,
      calculation: {
        requestedPoints: points,
        baseAmount: Math.round(baseAmount * 100) / 100,
        processingFee: Math.round(processingFee * 100) / 100,
        networkFee,
        finalAmount: Math.round(finalAmount * 100) / 100,
        conversionRate,
        feePercent
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—ã–≤–æ–¥–∞:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// @route POST /api/payments/withdraw
// @desc –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
// @access Private
router.post('/withdraw', [
  authenticateToken,
  body('points').isInt({ min: 1 }),
  body('walletAddress').isLength({ min: 20, max: 100 }).trim(),
  body('walletType').isIn(['USDT_TRC20', 'USDT_ERC20', 'USDT_BEP20']),
  body('deviceFingerprint').optional().isString()
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        errors: errors.array()
      });
    }
    
    const { points, walletAddress, walletType, deviceFingerprint } = req.body;
    
    const user = await User.findById(req.user.userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (user.isBanned) {
      return res.status(403).json({
        success: false,
        message: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
        reason: user.banReason
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
    if (user.points < points) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤',
        available: user.points,
        requested: points
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –Ω–∞ –≤—ã–≤–æ–¥
    const recentWithdrawals = await WithdrawalRequest.find({
      user: user._id,
      createdAt: { $gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }
    });
    
    if (recentWithdrawals.length >= 3) {
      return res.status(429).json({
        success: false,
        message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ (3 –≤ –¥–µ–Ω—å)'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    const pendingWithdrawals = await WithdrawalRequest.find({
      user: user._id,
      status: { $in: ['pending', 'processing', 'on_hold'] }
    });
    
    if (pendingWithdrawals.length > 0) {
      return res.status(400).json({
        success: false,
        message: '–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥',
        pendingCount: pendingWithdrawals.length
      });
    }
    
    // –†–∞—Å—á–µ—Ç —Å—É–º–º
    const conversionRate = parseInt(process.env.POINTS_TO_USDT_RATE) || 1000;
    const feePercent = parseFloat(process.env.WITHDRAWAL_FEE_PERCENT) || 5;
    
    const baseAmount = points / conversionRate;
    const processingFee = (baseAmount * feePercent) / 100;
    
    const networkFees = {
      'USDT_TRC20': 1,
      'USDT_ERC20': 15,
      'USDT_BEP20': 0.5
    };
    
    const networkFee = networkFees[walletType] || 1;
    const finalAmount = baseAmount - processingFee - networkFee;
    
    if (finalAmount <= 0) {
      return res.status(400).json({
        success: false,
        message: '–°—É–º–º–∞ –ø–æ—Å–ª–µ –≤—ã—á–µ—Ç–∞ –∫–æ–º–∏—Å—Å–∏–π —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞'
      });
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ç—å
    const networks = {
      'USDT_TRC20': 'TRON',
      'USDT_ERC20': 'ETHEREUM',
      'USDT_BEP20': 'BSC'
    };
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
    const withdrawalRequest = new WithdrawalRequest({
      user: user._id,
      amount: baseAmount,
      pointsDeducted: points,
      walletAddress,
      walletType,
      network: networks[walletType],
      conversionRate,
      processingFee,
      networkFee,
      finalAmount,
      metadata: {
        ipAddress: req.ip,
        userAgent: req.get('User-Agent'),
        deviceFingerprint
      }
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    await withdrawalRequest.runSecurityChecks();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    await withdrawalRequest.save();
    
    // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.points -= points;
    await user.save();
    
    res.json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞',
      withdrawalId: withdrawalRequest._id,
      status: withdrawalRequest.status,
      finalAmount: withdrawalRequest.finalAmount,
      estimatedProcessingTime: '24-48 —á–∞—Å–æ–≤'
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// @route GET /api/payments/withdrawals
// @desc –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤—ã–≤–æ–¥–æ–≤
// @access Private
router.get('/withdrawals', [
  authenticateToken,
  query('status').optional().isIn(['pending', 'processing', 'completed', 'failed', 'cancelled', 'on_hold']),
  query('page').optional().isInt({ min: 1 }),
  query('limit').optional().isInt({ min: 1, max: 50 })
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        errors: errors.array()
      });
    }
    
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 20;
    const skip = (page - 1) * limit;
    
    const options = {
      status: req.query.status,
      limit,
      skip
    };
    
    const withdrawals = await WithdrawalRequest.getUserWithdrawals(req.user.userId, options);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤
    const stats = await WithdrawalRequest.aggregate([
      { $match: { user: require('mongoose').Types.ObjectId(req.user.userId) } },
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 },
          totalAmount: { $sum: '$finalAmount' }
        }
      }
    ]);
    
    const totalWithdrawn = await WithdrawalRequest.aggregate([
      { 
        $match: { 
          user: require('mongoose').Types.ObjectId(req.user.userId),
          status: 'completed'
        } 
      },
      {
        $group: {
          _id: null,
          total: { $sum: '$finalAmount' }
        }
      }
    ]);
    
    res.json({
      success: true,
      withdrawals: withdrawals.map(w => ({
        id: w._id,
        amount: w.finalAmount,
        pointsDeducted: w.pointsDeducted,
        walletAddress: w.walletAddress,
        walletType: w.walletType,
        network: w.network,
        status: w.status,
        processingFee: w.processingFee,
        networkFee: w.networkFee,
        requestedAt: w.requestedAt,
        processedAt: w.processedAt,
        completedAt: w.completedAt,
        transactionHash: w.blockchain?.transactionHash,
        explorerUrl: w.explorerLink,
        failureReason: w.failureReason,
        canResubmit: w.canResubmit && w.status === 'failed',
        processingTime: w.processingTime
      })),
      pagination: {
        page,
        limit,
        total: withdrawals.length
      },
      stats: {
        byStatus: stats,
        totalWithdrawn: totalWithdrawn[0]?.total || 0
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≤–æ–¥–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// @route GET /api/payments/withdrawal/:id
// @desc –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
// @access Private
router.get('/withdrawal/:id', authenticateToken, async (req, res) => {
  try {
    const withdrawal = await WithdrawalRequest.findById(req.params.id)
      .populate('user', 'username firstName lastName')
      .populate('processedBy', 'name');
    
    if (!withdrawal) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (withdrawal.user._id.toString() !== req.user.userId) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ'
      });
    }
    
    res.json({
      success: true,
      withdrawal: {
        id: withdrawal._id,
        amount: withdrawal.finalAmount,
        pointsDeducted: withdrawal.pointsDeducted,
        walletAddress: withdrawal.walletAddress,
        walletType: withdrawal.walletType,
        network: withdrawal.network,
        status: withdrawal.status,
        conversionRate: withdrawal.conversionRate,
        processingFee: withdrawal.processingFee,
        networkFee: withdrawal.networkFee,
        requestedAt: withdrawal.requestedAt,
        processedAt: withdrawal.processedAt,
        completedAt: withdrawal.completedAt,
        processingTime: withdrawal.processingTime,
        blockchain: withdrawal.blockchain,
        explorerUrl: withdrawal.explorerLink,
        failureReason: withdrawal.failureReason,
        failureCategory: withdrawal.failureCategory,
        canResubmit: withdrawal.canResubmit,
        resubmissionDeadline: withdrawal.resubmissionDeadline,
        securityChecks: withdrawal.securityChecks,
        attempts: withdrawal.attempts,
        maxAttempts: withdrawal.maxAttempts,
        notifications: withdrawal.notifications,
        processedBy: withdrawal.processedBy
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// @route POST /api/payments/withdrawal/:id/cancel
// @desc –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
// @access Private
router.post('/withdrawal/:id/cancel', authenticateToken, async (req, res) => {
  try {
    const withdrawal = await WithdrawalRequest.findById(req.params.id);
    
    if (!withdrawal) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (withdrawal.user.toString() !== req.user.userId) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
    if (!['pending', 'on_hold'].includes(withdrawal.status)) {
      return res.status(400).json({
        success: false,
        message: '–ó–∞—è–≤–∫—É –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ',
        currentStatus: withdrawal.status
      });
    }
    
    // –û—Ç–º–µ–Ω—è–µ–º –∑–∞—è–≤–∫—É
    await withdrawal.cancel('–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const user = await User.findById(req.user.userId);
    if (user) {
      user.points += withdrawal.pointsDeducted;
      await user.save();
    }
    
    res.json({
      success: true,
      message: '–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –±–∞–ª–ª—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç',
      returnedPoints: withdrawal.pointsDeducted
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({
      success: false,
      message: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

// @route GET /api/payments/stats
// @desc –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
// @access Private
router.get('/stats', authenticateToken, async (req, res) => {
  try {
    const user = await User.findById(req.user.userId);
    
    if (!user) {
      return res.status(404).json({
        success: false,
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    const withdrawalStats = await WithdrawalRequest.aggregate([
      { $match: { user: user._id } },
      {
        $group: {
          _id: '$status',
          count: { $sum: 1 },
          totalAmount: { $sum: '$finalAmount' },
          avgAmount: { $avg: '$finalAmount' }
        }
      }
    ]);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ç—è–º
    const networkStats = await WithdrawalRequest.aggregate([
      { $match: { user: user._id } },
      {
        $group: {
          _id: '$network',
          count: { $sum: 1 },
          totalAmount: { $sum: '$finalAmount' }
        }
      }
    ]);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const monthlyStats = await WithdrawalRequest.aggregate([
      { $match: { user: user._id } },
      {
        $group: {
          _id: {
            year: { $year: '$requestedAt' },
            month: { $month: '$requestedAt' }
          },
          count: { $sum: 1 },
          totalAmount: { $sum: '$finalAmount' }
        }
      },
      { $sort: { '_id.year': -1, '_id.month': -1 } },
      { $limit: 12 }
    ]);
    
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const totalWithdrawn = withdrawalStats
      .filter(s => s._id === 'completed')
      .reduce((sum, s) => sum + s.totalAmount, 0);
    
    const totalPending = withdrawalStats
      .filter(s => ['pending', 'processing', 'on_hold'].includes(s._id))
      .reduce((sum, s) => sum + s.totalAmount, 0);
    
    const avgWithdrawal = withdrawalStats
      .filter(s => s._id === 'completed')
      .reduce((sum, s) => sum + s.avgAmount, 0);
    
    const totalRequests = withdrawalStats.reduce((sum, s) => sum + s.count, 0);
    
    res.json({
      success: true,
      user: {
        currentBalance: user.points,
        totalEarned: user.totalEarned,
        canWithdraw: user.points >= (parseInt(process.env.MIN_WITHDRAWAL_POINTS) || 1000)
      },
      withdrawals: {
        total: totalRequests,
        completed: withdrawalStats.find(s => s._id === 'completed')?.count || 0,
        pending: withdrawalStats.filter(s => ['pending', 'processing', 'on_hold'].includes(s._id))
          .reduce((sum, s) => sum + s.count, 0),
        failed: withdrawalStats.find(s => s._id === 'failed')?.count || 0
      },
      amounts: {
        totalWithdrawn: Math.round(totalWithdrawn * 100) / 100,
        totalPending: Math.round(totalPending * 100) / 100,
        avgWithdrawal: Math.round(avgWithdrawal * 100) / 100
      },
      byStatus: withdrawalStats,
      byNetwork: networkStats,
      monthly: monthlyStats
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
});

module.exports = router; 